/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca4006;


import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;


public class Main {
    public static int current_tick = 0;
    public static int TICK_TIME = 50;
    public static Random rand = new Random(42);
    public static int numberOfStoreAssistants = 3;
    public static int maxCustomersPerSection = 3;
    public static List<String> sections = List.of("electronics", "clothing", "furniture", "toys", "sporting goods", "books");
    public static HashMap<String, Section> sectionMap = new HashMap<>();
    public static DeliveryBox deliveryBox = new DeliveryBox();
    public static int customer_count = 0;
    public static HashMap<String, ExecutorService> sectionExecutors = new HashMap<>();

    public static void setSections(List<String> sections) {
        Main.sections = sections;
    }
    public static ArrayList<Integer> customerWaitTimes = new ArrayList<>();
    public static ArrayList<Integer> assistantDeliveryPickups = new ArrayList<>();

    public static String getCurrentTickTime() {
        return Utils.YELLOW + "Tick " + current_tick + ": " + Utils.RESET;
    }

    public static void main(String[] args) {
        for (int i = 0; i < args.length / 2; i++) {
            try {
                if (args[i * 2].equalsIgnoreCase("assistants")) {
                    numberOfStoreAssistants = Integer.parseInt(args[i * 2 + 1]);
                } else if (args[i * 2].equalsIgnoreCase("customers")) {
                    maxCustomersPerSection = Integer.parseInt(args[i * 2 + 1]);
                }
            } catch (NumberFormatException e) {
                System.out.println("could not parse int from argument at index: " + (i * 2 + 1));
            }
        }
        System.out.println("The store has " + maxCustomersPerSection + " customers (maximum per section) and " + numberOfStoreAssistants + " assistants");

        final ExecutorService storeAssistantExecutorService = Executors.newFixedThreadPool(numberOfStoreAssistants);

        for (String section : sections) {
            sectionMap.put(section, new Section(section, 5, 10));
            sectionExecutors.put(section, Executors.newFixedThreadPool(maxCustomersPerSection));
        }
        System.out.println("TICK_TIME: " + TICK_TIME);

        System.out.println(deliveryBox);

        for (int i = 0; i < numberOfStoreAssistants; i++) {
            storeAssistantExecutorService.execute(new StoreAssistant("StoreAssistant" + i));
        }


        while (true) {
            try {
                Thread.sleep(TICK_TIME);
                current_tick += 1;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            int randomInt100 = rand.nextInt(100);
            int randomInt10 = rand.nextInt(10);

            // randomly add a delivery around every 100 ticks
            if (randomInt100 == 0) {
                deliveryBox.newDelivery();
                System.out.println(getCurrentTickTime() + "deliveryBox.newDelivery() activated" + deliveryBox);
            }

            // randomly add a customer around every 10 ticks
            if (randomInt10 == 0) {
                String sectionToPurchase = sections.get(rand.nextInt(sections.size()));
                ThreadPoolExecutor currentSectionExecutors = (ThreadPoolExecutor) sectionExecutors.get(sectionToPurchase);
                if (currentSectionExecutors.getQueue().size() < 10) {
                    currentSectionExecutors.execute(new Customer("Customer" + customer_count++, sectionToPurchase));
                }
            }

            if (current_tick % 100 == 0) {
                System.out.println(getCurrentTickTime() + "deliveryBox: " + deliveryBox);
                for (String section : sections) {
                    System.out.println(getCurrentTickTime() + section + ": " + sectionMap.get(section).stock);
                }
            }

            List<String> sortedSections = new java.util.ArrayList<>(List.copyOf(sections));
            sortedSections.sort(Comparator.comparingInt(o -> sectionMap.get(o).stock));
            setSections(sortedSections);

            if (current_tick % 1000 == 0) {
                System.out.println(Utils.BLUE + "All customer wait times = " + customerWaitTimes);
                System.out.println(Utils.BLUE + "Average customer wait time = " + (customerWaitTimes.stream().mapToInt(a -> a).average().getAsDouble()));
                customerWaitTimes = new ArrayList<>();

                System.out.println(Utils.BLUE + "All times between assistant delivery pickups = " + assistantDeliveryPickups);
                System.out.println(Utils.BLUE + "Average time between assistant delivery pickups = " + (assistantDeliveryPickups.stream().mapToInt(a -> a).average().getAsDouble()));
                assistantDeliveryPickups = new ArrayList<>();
            }
        }
    }
}
