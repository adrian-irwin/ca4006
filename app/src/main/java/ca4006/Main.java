/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca4006;


import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;


public class Main {
    public static String RESET = "\033[0m";
    public static String RED = "\033[0;31m";
    public static String GREEN = "\033[0;32m";
    public static String YELLOW = "\033[0;33m";
    public static String BLUE = "\033[0;34m";
    public static String PURPLE = "\033[0;35m";
    public static String CYAN = "\033[0;36m";
    public static String WHITE = "\033[0;37m";
    public static String BLACK = "\033[0;30m";
    public static int current_tick = 0;
    public static int TICK_TIME = 50;
    public static Random rand = new Random(42);
    public static int numberOfStoreAssistants = 3;
    public static int numberOfCustomers = 3;
    public static List<String> sections = List.of("electronics", "clothing", "furniture", "toys", "sporting goods", "books");
    public static HashMap<String, Section> sectionMap = new HashMap<>();
    public static DeliveryBox deliveryBox = new DeliveryBox();
    public static int cust_count = 0;

    public static void setSections(List<String> sections) {
        Main.sections = sections;
    }

    public static String getCurrentTickTime() {
        return YELLOW + "Tick " + current_tick + ": " + RESET;
    }

    public static void main(String[] args) {
        for (int i = 0; i < args.length / 2; i++) {
            try {
                if (args[i * 2].equalsIgnoreCase("assistants")) {
                    numberOfStoreAssistants = Integer.parseInt(args[i * 2 + 1]);
                } else if (args[i * 2].equalsIgnoreCase("customers")) {
                    numberOfCustomers = Integer.parseInt(args[i * 2 + 1]);
                }
            } catch (NumberFormatException e) {
                System.out.println("could not parse int from argument at index: " + (i * 2 + 1));
            }
        }
        System.out.println("The store has " + numberOfCustomers + " customers and " + numberOfStoreAssistants + " assistants");

        final ExecutorService executorService = Executors.newFixedThreadPool(numberOfCustomers + numberOfStoreAssistants);
        for (String section : sections) {
            sectionMap.put(section, new Section(section, 5, 10));
        }
        System.out.println("TICK_TIME: " + TICK_TIME);

        System.out.println(deliveryBox);

        for (int i = 0; i < numberOfStoreAssistants; i++) {
            executorService.execute(new StoreAssistant("StoreAssistant" + i));
        }


        while (true) {
            try {
                Thread.sleep(TICK_TIME);
                current_tick += 1;
//                System.out.println(getCurrentTickTime());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (current_tick % 50 == 0) {
                ThreadPoolExecutor tpe = (ThreadPoolExecutor) executorService;
                System.out.println("Current pool size: " + tpe.getPoolSize());
                System.out.println("Current number of active threads: " + tpe.getActiveCount());
                System.out.println("Core pool size: " + tpe.getCorePoolSize());
                System.out.println("Size of queue: " + tpe.getQueue().size());
                System.out.println("Queue: " + tpe.getQueue());
            }

            int randomInt100 = rand.nextInt(100);
            int randomInt10 = rand.nextInt(10);

            // randomly add a delivery around every 100 ticks
            if (randomInt100 == 0) {
                deliveryBox.newDelivery();
                System.out.println(getCurrentTickTime() + "deliveryBox.newDelivery() activated" + deliveryBox);
            }

            // randomly add a customer around every 10 ticks
            if (randomInt10 == 0) {
                executorService.execute(new Customer("Customer" + cust_count++));
            }

            if (current_tick % 100 == 0) {
                System.out.println(getCurrentTickTime() + "deliveryBox: " + deliveryBox);
                for (String section : sections) {
                    System.out.println(getCurrentTickTime() + section + ": " + sectionMap.get(section).stock);
                }
            }

            // sort sections by stock every 5 ticks
            if (current_tick % 5 == 0) {
                List<String> sortedSections = new java.util.ArrayList<>(List.copyOf(sections));
                sortedSections.sort(Comparator.comparingInt(o -> sectionMap.get(o).stock));
                setSections(sortedSections);
            }
        }
    }
}
